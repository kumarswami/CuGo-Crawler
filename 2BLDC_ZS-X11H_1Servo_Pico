#include <Servo.h>

const int MR8_PIN[8] = {0, 1, 2, 3, 4, 5, 6, 7}; // Connect receiver pins A to H to GPIO 0 to GPIO 7
const int servoPin = 9;  // Connect the servo signal wire to GPIO 9 (or any other PWM-capable pin)
const int leftEscPin = 10;   // Connect the left ESC signal wire to GPIO 10
const int rightEscPin = 11;  // Connect the right ESC signal wire to GPIO 11
const int hallPins[3] = {12, 13, 14}; // Hall sensor pins

const int leftDirectionPin = 15; // Connect left motor direction control wire to GPIO 15
const int leftBrakePin = 16;     // Connect left motor brake control wire to GPIO 16
const int leftStopPin = 17;      // Connect left motor stop control wire to GPIO 17
const int rightDirectionPin = 18; // Connect right motor direction control wire to GPIO 18
const int rightBrakePin = 19;     // Connect right motor brake control wire to GPIO 19
const int rightStopPin = 20;      // Connect right motor stop control wire to GPIO 20

volatile unsigned long startPulse[8];
volatile int getPulse[8];
Servo myServo;
Servo leftESC; // Use Servo library to control the left ESC
Servo rightESC; // Use Servo library to control the right ESC

void channelChangeInterrupt(int channel) {
  unsigned long nowPulse = micros();
  if (digitalRead(MR8_PIN[channel]) == HIGH) {
    startPulse[channel] = nowPulse;
  } else {
    getPulse[channel] = nowPulse - startPulse[channel];
  }
}

void chAChangeInterrupt() { channelChangeInterrupt(0); }
void chBChangeInterrupt() { channelChangeInterrupt(1); }
void chCChangeInterrupt() { channelChangeInterrupt(2); }
void chDChangeInterrupt() { channelChangeInterrupt(3); }
void chEChangeInterrupt() { channelChangeInterrupt(4); }
void chFChangeInterrupt() { channelChangeInterrupt(5); }
void chGChangeInterrupt() { channelChangeInterrupt(6); }
void chHChangeInterrupt() { channelChangeInterrupt(7); }

// Variables for Hall Sensor state
volatile int hallState = 0;
volatile int lastHallState = 0;
volatile int direction = 1; // 1 for forward, -1 for reverse
volatile int position = 0;

void hallSensorInterrupt() {
  int state = (digitalRead(hallPins[0]) << 2) | (digitalRead(hallPins[1]) << 1) | digitalRead(hallPins[2]);
  if (state != hallState) {
    lastHallState = hallState;
    hallState = state;
    if (direction == 1) {
      position++;
    } else {
      position--;
    }
  }
}

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < 8; i++) {
    pinMode(MR8_PIN[i], INPUT);
  }
  for (int i = 0; i < 3; i++) {
    pinMode(hallPins[i], INPUT);
    attachInterrupt(digitalPinToInterrupt(hallPins[i]), hallSensorInterrupt, CHANGE);
  }

  attachInterrupt(digitalPinToInterrupt(MR8_PIN[0]), chAChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[1]), chBChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[2]), chCChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[3]), chDChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[4]), chEChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[5]), chFChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[6]), chGChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[7]), chHChangeInterrupt, CHANGE);

  myServo.attach(servoPin);
  leftESC.attach(leftEscPin);
  rightESC.attach(rightEscPin);

  pinMode(leftDirectionPin, OUTPUT);
  pinMode(leftBrakePin, OUTPUT);
  pinMode(leftStopPin, OUTPUT);
  pinMode(rightDirectionPin, OUTPUT);
  pinMode(rightBrakePin, OUTPUT);
  pinMode(rightStopPin, OUTPUT);
}

void loop() {
  for (int i = 0; i < 8; i++) {
    Serial.printf("getPulse[%d] CH %c:%d\n", i, 'A' + i, getPulse[i]);
  }

  // Control Servo Motor with Channel A
  int pulseWidthA = getPulse[0]; // Pulse width in microseconds from channel A
  int servoPos = map(pulseWidthA, 1000, 2000, 0, 180); // Assuming the pulse width is between 1000 and 2000 microseconds
  myServo.write(servoPos); // Set the servo position

  Serial.printf("Servo Position: %d\n", servoPos);

  // Control BLDC Motors with Channel B
  int pulseWidthB = getPulse[1]; // Pulse width in microseconds from channel B
  int leftEscSpeed;
  int rightEscSpeed;
  if (pulseWidthB > 1500) {
    direction = 1; // Forward
    leftEscSpeed = map(pulseWidthB, 1500, 2000, 90, 180); // Map forward range for left motor
    rightEscSpeed = map(pulseWidthB, 1500, 2000, 90, 180); // Map forward range for right motor
  } else if (pulseWidthB < 1500) {
    direction = -1; // Reverse
    leftEscSpeed = map(pulseWidthB, 1000, 1500, 0, 90); // Map reverse range for left motor
    rightEscSpeed = map(pulseWidthB, 1000, 1500, 0, 90); // Map reverse range for right motor
  } else {
    leftEscSpeed = 90; // Stop for left motor
    rightEscSpeed = 90; // Stop for right motor
  }
  leftESC.write(leftEscSpeed); // Set the left ESC speed
  rightESC.write(rightEscSpeed); // Set the right ESC speed

  // Control Turning with Channel C
  int pulseWidthC = getPulse[2]; // Pulse width in microseconds from channel C
  if (pulseWidthC > 1500) {
    // Turn right
    digitalWrite(leftDirectionPin, LOW);  // Left motor reverse
    digitalWrite(rightDirectionPin, HIGH); // Right motor forward
  } else if (pulseWidthC < 1500) {
    // Turn left
    digitalWrite(leftDirectionPin, HIGH);  // Left motor forward
    digitalWrite(rightDirectionPin, LOW); // Right motor reverse
  } else {
    // Straight
    digitalWrite(leftDirectionPin, direction == 1 ? HIGH : LOW);
    digitalWrite(rightDirectionPin, direction == 1 ? HIGH : LOW);
  }

  Serial.printf("Left ESC Speed: %d, Right ESC Speed: %d, Direction: %d\n", leftEscSpeed, rightEscSpeed, direction);

  // Print Hall Sensor State and Position
  Serial.printf("Hall State: %d, Position: %d\n", hallState, position);
  Serial.println(" ");
  delay(50);
}
