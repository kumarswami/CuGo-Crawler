#include <Servo.h>

const int MR8_PIN[8] = {0, 1, 2, 3, 4, 5, 6, 7}; // Connect receiver pins A to H to GPIO 0 to GPIO 7
const int servoPin = 9;  // Connect the servo signal wire to GPIO 9 (or any other PWM-capable pin)
const int escPin = 10;   // Connect the ESC signal wire to GPIO 10
const int hallPins[3] = {11, 12, 13}; // Hall sensor pins

const int directionPin = 14; // Connect direction control wire to GPIO 14
const int brakePin = 15;     // Connect brake control wire to GPIO 15
const int stopPin = 16;      // Connect stop control wire to GPIO 16

volatile unsigned long startPulse[8];
volatile int getPulse[8];
Servo myServo;
Servo myESC; // Use Servo library to control the ESC

void channelChangeInterrupt(int channel) {
  unsigned long nowPulse = micros();
  if (digitalRead(MR8_PIN[channel]) == HIGH) {
    startPulse[channel] = nowPulse;
  } else {
    getPulse[channel] = nowPulse - startPulse[channel];
  }
}

void chAChangeInterrupt() { channelChangeInterrupt(0); }
void chBChangeInterrupt() { channelChangeInterrupt(1); }
void chCChangeInterrupt() { channelChangeInterrupt(2); }
void chDChangeInterrupt() { channelChangeInterrupt(3); }
void chEChangeInterrupt() { channelChangeInterrupt(4); }
void chFChangeInterrupt() { channelChangeInterrupt(5); }
void chGChangeInterrupt() { channelChangeInterrupt(6); }
void chHChangeInterrupt() { channelChangeInterrupt(7); }

// Variables for Hall Sensor state
volatile int hallState = 0;
volatile int lastHallState = 0;
volatile int direction = 1; // 1 for forward, -1 for reverse
volatile int position = 0;

void hallSensorInterrupt() {
  int state = (digitalRead(hallPins[0]) << 2) | (digitalRead(hallPins[1]) << 1) | digitalRead(hallPins[2]);
  if (state != hallState) {
    lastHallState = hallState;
    hallState = state;
    if (direction == 1) {
      position++;
    } else {
      position--;
    }
  }
}

void setup() {
  Serial.begin(115200);
  for (int i = 0; i < 8; i++) {
    pinMode(MR8_PIN[i], INPUT);
  }
  for (int i = 0; i < 3; i++) {
    pinMode(hallPins[i], INPUT);
    attachInterrupt(digitalPinToInterrupt(hallPins[i]), hallSensorInterrupt, CHANGE);
  }

  attachInterrupt(digitalPinToInterrupt(MR8_PIN[0]), chAChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[1]), chBChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[2]), chCChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[3]), chDChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[4]), chEChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[5]), chFChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[6]), chGChangeInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(MR8_PIN[7]), chHChangeInterrupt, CHANGE);

  myServo.attach(servoPin);
  myESC.attach(escPin);

  pinMode(directionPin, OUTPUT);
  pinMode(brakePin, OUTPUT);
  pinMode(stopPin, OUTPUT);
}

void loop() {
  for (int i = 0; i < 8; i++) {
    Serial.printf("getPulse[%d] CH %c:%d\n", i, 'A' + i, getPulse[i]);
  }

  // Control Servo Motor with Channel A
  int pulseWidthA = getPulse[0]; // Pulse width in microseconds from channel A
  int servoPos = map(pulseWidthA, 1000, 2000, 0, 180); // Assuming the pulse width is between 1000 and 2000 microseconds
  myServo.write(servoPos); // Set the servo position

  Serial.printf("Servo Position: %d\n", servoPos);

  // Control BLDC Motor with Channel B
  int pulseWidthB = getPulse[1]; // Pulse width in microseconds from channel B
  int escSpeed;
  if (pulseWidthB > 1500) {
    direction = 1; // Forward
    escSpeed = map(pulseWidthB, 1500, 2000, 90, 180); // Map forward range
  } else if (pulseWidthB < 1500) {
    direction = -1; // Reverse
    escSpeed = map(pulseWidthB, 1000, 1500, 0, 90); // Map reverse range
  } else {
    escSpeed = 90; // Stop
  }
  myESC.write(escSpeed); // Set the ESC speed

  // Set direction pin
  digitalWrite(directionPin, direction == 1 ? HIGH : LOW);

  Serial.printf("ESC Speed: %d, Direction: %d\n", escSpeed, direction);

  // Print Hall Sensor State and Position
  Serial.printf("Hall State: %d, Position: %d\n", hallState, position);
  Serial.println(" ");
  delay(50);
}

void brakeMotor() {
  digitalWrite(brakePin, HIGH);
  delay(100); // Brake for 100ms
  digitalWrite(brakePin, LOW);
}

void stopMotor() {
  digitalWrite(stopPin, HIGH);
  delay(100); // Stop for 100ms
  digitalWrite(stopPin, LOW);
}

void changeDirection() {
  direction = -direction; // Toggle direction
  // You might need to reinitialize the ESC or change control logic to support direction change.
}
